Código resultante del programa:

```python 
import time

from machine import Pin




ledpin = Pin("LED", Pin.OUT)#pin 25 para pico normal, pin "LED" para la pico w ledpin.off()

count=0

sensor_temp = machine.ADC(4)

conversion_factor = 3.3 / (65535)

timeled = 0.5

booleano = True

while booleano:

 count = count + 1
 
 ledpin.on()
 
 time.sleep(timeled)
 
 ledpin.off()
 
 time.sleep(timeled)
 
 reading = sensor_temp.read_u16() * conversion_factor 
 
 temperature = 27 - (reading - 0.706)/0.001721
 
 print("#{} Temperatura: {}" .format(count,temperature))
 
 if count == 100:
 
 booleano = False
   ```
    
```python      
![](imagenes/p2.png)

## Integración de componente basico de pantalla

### Simulador desplegar en OLED display (de nombre SSD1306 la libreria)

Código

from machine import Pin, I2C

from ssd1206 import SSD1306_I2C

i2c=I2C(0,sda=Pin(0), scl=Pin(1), freq=400000)

oled = SSD1306_I2C(128, 64, i2c)

sensor_temp = machine.ADC(4)

conversion_factor = 3.3 / (65535)

booleano = True

while booleano:

 reading = sensor_temp.read_u16() * conversion_factor
 
 temperature = 27 - (reading - 0.706)/0.001721
 
 oled.text("Temperatura: {}" .format(temperature),0,0)
 
 oled.show()
```

``` from machine import Pin
import time
import socket
import network

led = Pin("LED", Pin.OUT)

ssid = 'moto g(7) play 1920'
password = 'MOEM001212'

wlan = network.WLAN(network.STA_IF)
wlan.active(True)
wlan.connect(ssid, password)

html = """<!DOCTYPE html>
<html>
<head> <title>Sistemas Programables</title> </head>
<body> <h1>Pico W</h1>
<p>Hola mundo</p>
<p>Bienvenidxs a mi primera practica en la red</p>
<p>Mora Espinosa Michelle Guadalupe 19211691</p>
</body>
</html>
"""

# Wait for connect or fail
max_wait = 100
while max_wait > 0:
    if wlan.status() < 0 or wlan.status() >= 3:
        break
    max_wait -= 1
    print('waiting for connection...')
    time.sleep(1)

# Handle connection error
if wlan.status() != 3:
    raise RuntimeError('network connection failed')
else:
    print('connected')
    status = wlan.ifconfig()
    print('ip = ' + status[0])

# Open socket
addr = socket.getaddrinfo('0.0.0.0', 80)[0][-1]

s = socket.socket()
s.bind(addr)
s.listen(1)

print('listening on', addr)

def blink_led():
    led.on()
    time.sleep(0.2)
    led.off()
    time.sleep(0.2)
    led.on()
    time.sleep(0.2)
    led.off()
    time.sleep(0.2)
    led.on()
    time.sleep(0.2)
    led.off()

# Listen for connections
while True:
    try:
        cl, addr = s.accept()
        blink_led()
        print('client connected from', addr)
        cl_file = cl.makefile('rwb', 0)
        while True:
            line = cl_file.readline()
            if not line or line == b'\r\n':
                break
        response = html
        cl.send('HTTP/1.0 200 OK\r\nContent-type: text/html\r\n\r\n')
        cl.send(response)
        cl.close()

    except OSError as e:
        cl.close()
        print('connection closed')
        ```
